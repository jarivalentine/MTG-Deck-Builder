@page "/"
@using Howest.MagicCards.DAL.Models;
@using Howest.MagicCards.Shared.DTO;
@using System.Text.Json;
@using Howest.MagicCards.Shared.ViewModels;
@using Howest.MagicCards.Shared.Wrappers;
@using System.Text;

@inject IHttpClientFactory httpClientFactory

<PageTitle>Index</PageTitle>

<h1>Deckbuilder</h1>

<div class="row">
    <div class="col-9">
        <EditForm Model="@_filter" OnValidSubmit="@FilterCards">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <div class="row">
                    <div class="col">
                        <InputText placeholder="name" id="Name" class="form-control" @bind-Value="@_filter.Name" />
                        <InputText placeholder="text" id="Text" class="form-control" @bind-Value="@_filter.Text" />
                    </div>
                    <div class="col">
                        <InputText placeholder="artist" id="Artist" class="form-control" @bind-Value="@_filter.Artist" />
                        <InputText placeholder="type" id="Type" class="form-control" @bind-Value="@_filter.Type" />
                    </div>
                    <div class="col">
                        <InputText placeholder="set" id="Set" class="form-control" @bind-Value="@_filter.Set" />

                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-info">Filter</button>
        </EditForm>
        <div>
            @if (cards == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <h2>@message</h2>
                @foreach (CardReadDTO card in cards)
                {
                    if (card.OriginalImageUrl != null)
					{
                        <img @onclick="@(() => AddToDeck(@card.Id))" width="200" src="@card.OriginalImageUrl" alt="@card.Name" />
                    }
                    else
                    {
                        <img @onclick="@(() => AddToDeck(@card.Id))" height="278" width="200" alt="No img found fallback" src="https://i.imgur.com/PtOJpqm.jpg" />
                    }
                }
            }
        </div>
    </div>
    <div class="col-3">
        <h2>Deck</h2>
        @if (deck == null)
        {
            <p>No cards in deck</p>
        }
        else
        {
            <ul>
                @foreach (MongoDBCard card in deck)
				{
					<li>@card.Name</li>
				}
            </ul>
        }
    </div>
</div>

@code {
    private string message = string.Empty;
    private bool _formActive;
    private FilterViewModel _filter;

    private IEnumerable<CardReadDTO>? cards = null;
    private IEnumerable<MongoDBCard>? deck = null;
    private readonly JsonSerializerOptions jsonOptions;
    private HttpClient _cardsApi;
    private HttpClient _deckApi;

    public Index()
    {
        jsonOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _formActive = false;
        _filter = new FilterViewModel();
        _cardsApi = httpClientFactory.CreateClient("CardsAPI");
        _deckApi = httpClientFactory.CreateClient("DeckAPI");
        await ReloadDeck();
        await GetCards();
    }

    private async Task FilterCards()
    {
        cards = null;
        await GetCards();
    }

    private async Task GetCards()
    {
        message = null;
        string url = "cards";
        if (_filter.Name != null) url += $"?name={_filter.Name}";
        if (_filter.Text != null) url += $"&text={_filter.Text}";
        if (_filter.Artist != null) url += $"&artist={_filter.Artist}";
        if (_filter.Type != null) url += $"&type={_filter.Type}";
        if (_filter.Set != null) url += $"&set={_filter.Set}";

        HttpResponseMessage response = await _cardsApi.GetAsync(url);

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            PagedResponse<IEnumerable<CardReadDTO>>? result =
                    JsonSerializer.Deserialize<PagedResponse<IEnumerable<CardReadDTO>>>(apiResponse, jsonOptions);
            cards = result?.Data;
        }
        else
        {
            cards = new List<CardReadDTO>();
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async void AddToDeck(long id)
    {
        message = null;
        CardReadDTO? card = null;

        HttpResponseMessage response = await _cardsApi.GetAsync($"cards/{id}");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Response<CardReadDTO>? result =
                    JsonSerializer.Deserialize<Response<CardReadDTO>>(apiResponse, jsonOptions);
            card = result?.Data;
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }

        await _deckApi.PostAsync("deck", new StringContent(JsonSerializer.Serialize(card, jsonOptions), Encoding.UTF8, "application/json"));
        await ReloadDeck();
    }

    private async Task ReloadDeck()
    {
        HttpResponseMessage response = await _deckApi.GetAsync("deck");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            IEnumerable<MongoDBCard> result =
                    JsonSerializer.Deserialize<IEnumerable<MongoDBCard>>(apiResponse, jsonOptions);
            deck = result;
        }
		else
		{
			message = $"Error: {response.ReasonPhrase}";
		}
    }
}