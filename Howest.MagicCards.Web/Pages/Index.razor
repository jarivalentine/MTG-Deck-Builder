@page "/"
@using Howest.MagicCards.DAL.Models;
@using Howest.MagicCards.Shared.DTO;
@using System.Text.Json;
@using Howest.MagicCards.Shared.ViewModels;
@using Howest.MagicCards.Shared.Wrappers;
@using System.Text;
@using System.Reflection;

@inject IHttpClientFactory httpClientFactory

<PageTitle>Index</PageTitle>

<h1>Deckbuilder</h1>

<div class="row">
    <div class="col-9">
        <EditForm Model="@_filter" OnValidSubmit="@FilterCards">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <div class="row">
                    <div class="col p-1">
                        <InputText placeholder="name" id="Name" class="form-control mb-2" @bind-Value="@_filter.Name" />
                        <InputText placeholder="text" id="Text" class="form-control mb-2" @bind-Value="@_filter.Text" />
                    </div>
                    <div class="col p-1">
                        <InputText placeholder="artist" id="Artist" class="form-control mb-2" @bind-Value="@_filter.Artist" />
                        <InputText placeholder="type" id="Type" class="form-control mb-2" @bind-Value="@_filter.Type" />
                    </div>
                    <div class="col p-1">
                        <InputText placeholder="set" id="Set" class="form-control mb-2" @bind-Value="@_filter.Set" />
                        <InputSelect id="Rarities" @bind-Value="@_filter.Rarity" class="form-control  mb-2">
							<option value="">All rarities</option>
                            @if (rarities != null) {
                                @foreach (string rarity in rarities)
                                {
                                    <option value="@rarity">@rarity</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="row">
                    <button type="submit" class="btn btn-info">Filter</button>
                </div>
            </div>
        </EditForm>
        <div>
            @if (cards == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <h2>@message</h2>
                @foreach (CardReadDTO card in cards)
                {
                    if (card.OriginalImageUrl != null)
					{
                        <img @onclick="@(() => AddToDeck(@card.Id))" width="200" src="@card.OriginalImageUrl" alt="@card.Name" />
                    }
                    else
                    {
                        <img @onclick="@(() => AddToDeck(@card.Id))" height="278" width="200" alt="No img found fallback" src="https://i.imgur.com/PtOJpqm.jpg" />
                    }
                }
            }
        </div>
    </div>
    <div class="col-3">
        <div class="row">
            <h2 class="col">Deck</h2>
            @if (@deck != null)
            {
                <h3 class="col">@deck.Sum(c => c.Amount) / 60</h3>
            }
            <button @onclick="(() => ResetDeck())" class="col btn btn-info">Reset</button>
        </div>
        @if (!string.IsNullOrEmpty(alert))
        {
            <div class="alert alert-danger">@alert</div>
        }
        @if (deck == null)
        {
            <p>No cards in deck</p>
        }
        else
        {
            <div>
                @foreach (MongoDBCard card in deck)
				{
                    <div class="d-flex m-1" style="user-select: none;">
                        <div class="p-2 bg-info rounded-circle" onmouseover="this.style.cursor='pointer'" @onclick="@(() => IncreaseInDeck(@card.Id))">@card.Amount</div>
                        <div class="p-2" onmouseover="this.style.cursor='pointer'" @onclick="@(() => RemoveFromDeck(@card.Id))">@card.Name</div>
                    </div>
				}
            </div>
        }
    </div>
</div>

@code {
    private string message = string.Empty;
    private string alert = string.Empty;
    private bool _formActive;
    private FilterViewModel _filter;

    private IEnumerable<CardReadDTO>? cards = null;
    private IEnumerable<MongoDBCard>? deck = null;
    private IEnumerable<string>? rarities = null;

    private readonly JsonSerializerOptions jsonOptions;
    private HttpClient _cardsApi;
    private HttpClient _deckApi;

    public Index()
    {
        jsonOptions = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _formActive = false;
        _filter = new FilterViewModel();
        _cardsApi = httpClientFactory.CreateClient("CardsAPI");
        _deckApi = httpClientFactory.CreateClient("DeckAPI");
        await loadRarities();
        await ReloadDeck();
        await GetCards();
    }

    private async Task FilterCards()
    {
        cards = null;
        await GetCards();
    }

    private async Task loadRarities()
    {
        HttpResponseMessage response = await _cardsApi.GetAsync("cards/rarities");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Response<IEnumerable<string>> result =
                    JsonSerializer.Deserialize<Response<IEnumerable<string>>>(apiResponse, jsonOptions);
            rarities = result?.Data;
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async Task GetCards()
    {
        message = null;
        string url = "cards";

        bool flag = false;
        foreach (PropertyInfo prop in _filter.GetType().GetProperties())
        {
            string value = prop.GetValue(_filter, null)?.ToString();

            if (!string.IsNullOrEmpty(value))
            {
                if (!flag) url += $"?{prop.Name}={value}";
                else url += $"&{prop.Name}={value}";
                flag = true;
            }
        }

        if (!string.IsNullOrEmpty(_filter.Rarity)) url += $"&rarity={_filter.Rarity}";

        HttpResponseMessage response = await _cardsApi.GetAsync(url);

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            PagedResponse<IEnumerable<CardReadDTO>>? result =
                    JsonSerializer.Deserialize<PagedResponse<IEnumerable<CardReadDTO>>>(apiResponse, jsonOptions);
            cards = result?.Data;
        }
        else
        {
            cards = new List<CardReadDTO>();
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async Task AddToDeck(long id)
    {
        message = null;
        if (deck.Sum(c => c.Amount) >= 60)
        {
            alert = "Already 60 cards!";
            return;
        }

        CardReadDTO? card = null;

        HttpResponseMessage response = await _cardsApi.GetAsync($"cards/{id}");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            Response<CardReadDTO>? result =
                    JsonSerializer.Deserialize<Response<CardReadDTO>>(apiResponse, jsonOptions);
            card = result?.Data;
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }

        bool isCardInDeck = deck?.Any(c => c.Id == card.Id) ?? false;
        if (isCardInDeck)
        {
            int currentAmount = deck.FirstOrDefault(c => c.Id == card.Id)?.Amount ?? 0;
            await UpdateInDeck(card.Id, currentAmount + 1);
            return;
        }

        response = await _deckApi.PostAsync("deck", new StringContent(JsonSerializer.Serialize(card, jsonOptions), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await ReloadDeck();
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async Task RemoveFromDeck(long id)
    {
        alert = null;
        int currentAmount = deck.FirstOrDefault(c => c.Id == id)?.Amount ?? 0;
        await UpdateInDeck(id, currentAmount - 1);
    }

    private async Task IncreaseInDeck(long id)
    {
        if (deck.Sum(c => c.Amount) >= 60)
        {
            alert = "Already 60 cards!";
            return;
        }
        int currentAmount = deck.FirstOrDefault(c => c.Id == id)?.Amount ?? 0;
        await UpdateInDeck(id, currentAmount + 1);
    }

    private async Task UpdateInDeck(long id, int amount)
    {
        MongoDBAmount newAmount = new MongoDBAmount();
        newAmount.Amount = amount;
        HttpResponseMessage response = await _deckApi.PutAsync($"deck/{id}", new StringContent(JsonSerializer.Serialize(newAmount, jsonOptions), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await ReloadDeck();
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async Task ResetDeck()
    {
        alert = null;
        HttpResponseMessage response = await _deckApi.DeleteAsync($"deck");

        if (response.IsSuccessStatusCode)
        {
            await ReloadDeck();
        }
        else
        {
            message = $"Error: {response.ReasonPhrase}";
        }
    }

    private async Task ReloadDeck()
    {
        HttpResponseMessage response = await _deckApi.GetAsync("deck");

        string apiResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            IEnumerable<MongoDBCard> result =
                    JsonSerializer.Deserialize<IEnumerable<MongoDBCard>>(apiResponse, jsonOptions);
            deck = result;
        }
		else
		{
			message = $"Error: {response.ReasonPhrase}";
		}
    }
}